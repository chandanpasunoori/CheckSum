package jonelo.jacksum.ui;

import java.io.File;
import java.util.Date;
import java.util.Properties;
import java.util.StringTokenizer;
import jonelo.jacksum.JacksumAPI;
import jonelo.jacksum.cli.Jacksum;
import jonelo.sugar.util.Version;

public class MetaInfo {

    private boolean _r = false;
    private boolean _p = false;
    private boolean _A = false;
    private String timestampFormat = null;
    private char filesep = File.separatorChar;
    private int grouping = 0;
    private char groupChar = ' ';
    private String algorithm = null;
    private String encoding = ""; 
    private String separator = null;
    private String commentchars = CheckFile.COMMENTDEFAULT;
    private Properties props = null;

    public final static String METAINFO = JacksumAPI.NAME + ": Meta-Info: ";

    public MetaInfo() {
        props = new Properties();
    }

    public MetaInfo(String parseString) throws MetaInfoVersionException {
        props = new Properties();
        parse(parseString);
    }

    public void parse(String thisLine) throws MetaInfoVersionException {
        StringTokenizer stsub = null;
        StringTokenizer st = new StringTokenizer(thisLine.substring(METAINFO.length()), ";");
        while (st.hasMoreTokens()) {
            stsub = new StringTokenizer(st.nextToken(), "=");
            props.setProperty(stsub.nextToken(), (stsub.hasMoreTokens() ? stsub.nextToken() : ""));
        }
        
        if (new Version(props.getProperty("version")).compareTo(JacksumAPI.getVersion()) > 0) {
            throw new MetaInfoVersionException(
                    "The file was generated by a newer version of Jacksum.\n"
                    + "Upgrade to the latest Jacksum release, at least to version " + props.getProperty("version"));
        }
        
        
        if (new Version(props.getProperty("version")).compareTo(new Version("1.6.0")) < 0) {
            props.setProperty("fieldsep", "\t");
        }

        _A = false;
        _r = false;
        _p = false;
        _r = false;
        String flags = props.getProperty("flags", "");
        for (int i = 0; i < flags.length(); i++) {
            if (flags.charAt(i) == 'A') {
                _A = true;
            } else if (flags.charAt(i) == 'x') { 
                encoding = "hex";
            } else if (flags.charAt(i) == 'X') { 
                encoding = "hexup";
            } else if (flags.charAt(i) == 'r') {
                _r = true;
            } else if (flags.charAt(i) == 'p') {
                _p = true;
            }
        }

        
        if ((props.getProperty("encoding") == null || props.getProperty("encoding").length() == 0)) {
            encoding = null;
        } else {
            encoding = props.getProperty("encoding");
        }

        
        algorithm = props.getProperty("algorithm", "sha1");
        
        if (algorithm.equals("whirlpool")
                && (new Version(props.getProperty("version")).compareTo(new Version("1.6.0")) < 0)) {
            algorithm = "whirlpool1";
        }

        if (props.getProperty("fieldsep") == null || props.getProperty("fieldsep").length() == 0) {
            separator = null;
        } else {
            separator = props.getProperty("fieldsep");
        }

        if (props.getProperty("group") == null || props.getProperty("group").length() == 0) {
            grouping = 0;
        } else { 
            try {
                grouping = Integer.parseInt(props.getProperty("group"));
            } catch (NumberFormatException nfe) {
                System.err.println("Jacksum: Warning: Ignoring the group value, because the value is invalid.");
                grouping = 0;
            }
        }

        if (props.getProperty("groupChar") == null || props.getProperty("groupChar").length() == 0) {
            groupChar = ' '; 
        } else { 
            groupChar = props.getProperty("groupChar").charAt(0);
        }

        if (props.getProperty("comment") == null || props.getProperty("comment").length() == 0) {
            setCommentchars(CheckFile.COMMENTDEFAULT);
        } else {
            setCommentchars(props.getProperty("comment"));
        }

        if (props.getProperty("filesep") == null || props.getProperty("filesep").length() == 0) {
            filesep = File.separatorChar;
        } else {
            filesep = props.getProperty("filesep").charAt(0);
        }

        
        if (props.getProperty("tformat") == null || props.getProperty("tformat").length() == 0) {
            setTimestampFormat(null);
        } else { 

            if (props.getProperty("tformat").equals("null")) { 
                System.err.println("Jacksum: Can't determine timeformat (tformat=null), trying default (tformat=" + Jacksum.TIMESTAMPFORMAT_DEFAULT + ")");
                setTimestampFormat(Jacksum.TIMESTAMPFORMAT_DEFAULT);
            } else {
                setTimestampFormat(props.getProperty("tformat"));
            }
        }
    }

    public void setAlgorithm(String algorithm) {
        this.algorithm = algorithm;
    }

    public String getAlgorithm() {
        return algorithm;
    }

    public void setVersion(String version) {
        props.setProperty("version", version);
    }

    public String getVersion() {
        return props.getProperty("version");
    }

    public void setRecursive(boolean _r) {
        this._r = _r;
    }

    public boolean isRecursive() {
        return _r;
    }

    public void setEncoding(String encoding) {
        this.encoding = encoding;
    }

    public String getEncoding() {
        return encoding;
    }

    public boolean isEncoding() {
        return encoding != null;
    }

    public void setPathInfo(boolean _p) {
        this._p = _p;
    }

    public boolean isPathInfo() {
        return _p;
    }

    public void setAlternate(boolean _A) {
        this._A = _A;
    }

    public boolean isAlternate() {
        return _A;
    }

    public void setTimestampFormat(String timestampFormat) {
        this.timestampFormat = timestampFormat;
    }

    public String getTimestampFormat() {
        return timestampFormat;
    }

    public boolean isTimestampFormat() {
        return timestampFormat != null;
    }

    public void setGrouping(int grouping) {
        this.grouping = grouping;
    }

    public int getGrouping() {
        return grouping;
    }

    public boolean isGrouping() {
        return grouping > 0;
    }

    public void setGroupChar(char groupChar) {
        this.groupChar = groupChar;
    }

    public char getGroupChar() {
        return groupChar;
    }

    public void setSeparator(String separator) {
        this.separator = separator;
    }

    public String getSeparator() {
        return separator;
    }

    public boolean isSeparatorWanted() {
        return separator != null;
    }

    public void setCommentchars(String commentchars) {
        this.commentchars = commentchars;
    }

    public String getCommentchars() {
        return commentchars;
    }

    public void setFilesep(char filesep) {
        this.filesep = filesep;
    }

    public char getFilesep() {
        return filesep;
    }

    public String getComment() {
        
        StringBuffer sb = new StringBuffer(240);
        return sb.toString();
    }

    public String toString() {

        StringBuffer buf = new StringBuffer(100);
        buf.append(METAINFO);
        buf.append("version=");
        buf.append(getVersion());
        buf.append(";");

        buf.append("algorithm=");
        buf.append(algorithm);
        buf.append(";");

        buf.append("filesep=");
        buf.append(filesep);
        buf.append(";");

        StringBuffer flags = new StringBuffer(5);
        if (_r) {
            flags.append('r');
        }
        if (_p) {
            flags.append('p');
        }
        if (_A) {
            flags.append('A');
        }
        if (flags.toString().length() > 0) {
            buf.append("flags=");
            buf.append(flags.toString());
            buf.append(";");
        }

        if (timestampFormat != null && timestampFormat.length() != 0) {
            buf.append("tformat=");
            buf.append(timestampFormat);
            buf.append(";");
        }

        if (grouping > 0) {
            buf.append("group=");
            buf.append(Integer.toString(grouping));
            buf.append(";");
            if (groupChar != ' ') {
                buf.append("groupChar=");
                buf.append(groupChar);
                buf.append(";");
            }
        }

        if (encoding != null && encoding.length() > 0) {
            buf.append("encoding=");
            buf.append(encoding);
            buf.append(";");
        }

        if (separator != null && !separator.equals("\t")) {
            buf.append("fieldsep="); 
            buf.append(separator);
            buf.append(";");
        }

        if (commentchars.length() > 0 && !commentchars.equals(CheckFile.COMMENTDEFAULT)) {
            buf.append("comment=");
            buf.append(commentchars);
            buf.append(";");
        }

        return buf.toString();
    }

}
